"""Query API and helpers"""
from goblin import mapper


def parse_traversal(traversal):
    script = traversal.translator.traversal_script
    bindings = traversal.bindings
    return script, bindings


class AsyncQueryResponseIter:

    def __init__(self, async_iter, query):
        self._async_iter = async_iter
        self._query = query

    async def __aiter__(self):
        return self

    async def __anext__(self):
        msg = await self._async_iter.fetch_data()
        if msg:
            results = msg.data
            processed_results = []
            for result in results:
                current = self._query.session.current.get(result['id'], None)
                if not current:
                    current = self._query._element_class()
                element = self._query._mapper(result, current,
                                              current.__mapping__)
                processed_results.append(element)
            return processed_results
        else:
            raise StopAsyncIteration


class Query:
    """Provides interface for user generated queries"""
    def __init__(self, session, element_class):
        self._session = session
        self._engine = session.engine
        self._element_class = element_class
        if element_class.__type__ == 'vertex':
            self._traversal = self._session.g.V().hasLabel(
                element_class.__mapping__.label)
            self._mapper = mapper.map_vertex_to_ogm
        elif element_class.__type__ == 'edge':
            self._traversal = self._session.g.E().hasLabel(
                element_class.__mapping__.label)
            self._mapper = mapper.map_edge_to_ogm
        else:
            raise Exception("unknown element type")

    @property
    def session(self):
        return self._session

    # Generative query methods...
    def filter(self, **kwargs):
        """Add a filter to the query"""
        raise NotImplementedError

    # Methods that issue a query
    async def all(self):
        """Get all results generated by query"""
        async_iter = await self.session._execute_traversal(self._traversal)
        return AsyncQueryResponseIter(async_iter, self)
