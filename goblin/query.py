"""Query API and helpers"""
import asyncio
import logging
from goblin import mapper


logger = logging.getLogger(__name__)


def parse_traversal(traversal):
    script = traversal.translator.traversal_script
    bindings = traversal.bindings
    return script, bindings


class QueryResponse:

    def __init__(self, response_queue):
        self._queue = response_queue
        self._done = False

    async def __aiter__(self):
        return self

    async def __anext__(self):
        if self._done:
            return
        msg = await self._queue.get()
        if msg:
            return msg
        else:
            self._done = True
            raise StopAsyncIteration


class Query:
    """Provides interface for user generated queries"""
    def __init__(self, session, element_class):
        self._session = session
        self._engine = session.engine
        self._element_class = element_class
        self._loop = self._session._loop
        if element_class.__type__ == 'vertex':
            self._traversal = self.session.traversal.g.V().hasLabel(
                element_class.__mapping__.label)
            self._mapper = mapper.map_vertex_to_ogm
        elif element_class.__type__ == 'edge':
            self._traversal = self.session.traversal.g.E().hasLabel(
                element_class.__mapping__.label)
            self._mapper = mapper.map_edge_to_ogm
        else:
            raise Exception("unknown element type")

    @property
    def session(self):
        return self._session

    # Generative query methods...
    def filter(self, **kwargs):
        """Add a filter to the query"""
        raise NotImplementedError

    # Methods that issue a query
    async def all(self):
        """Get all results generated by query"""
        async_iter = await self.session.execute_traversal(self._traversal)
        response_queue = asyncio.Queue(loop=self._loop)
        self._loop.create_task(self._receive(async_iter, response_queue))
        return QueryResponse(response_queue)

    async def _receive(self, async_iter, response_queue):
        async for msg in async_iter:
            results = msg.data
            for result in results:
                current = self.session.current.get(result['id'], None)
                if not current:
                    current = self._element_class()
                element = self._mapper(result, current,
                                              current.__mapping__)
                response_queue.put_nowait(element)
        response_queue.put_nowait(None)
