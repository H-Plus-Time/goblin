"""Query API and helpers"""
import collections
import logging
from goblin import mapper


logger = logging.getLogger(__name__)


def parse_traversal(traversal):
    script = traversal.translator.traversal_script
    bindings = traversal.bindings
    return script, bindings


class AsyncQueryResponseIter:

    def __init__(self, async_iter, query):
        self._async_iter = async_iter
        self._query = query
        self._queue = collections.deque()

    async def __aiter__(self):
        return self

    async def __anext__(self):
        if not self._queue:
            msg = await self._async_iter.fetch_data()
            if msg:
                results = msg.data
                for result in results:
                    current = self._query.session.current.get(result['id'], None)
                    if not current:
                        current = self._query._element_class()
                    element = self._query._mapper(result, current,
                                                  current.__mapping__)
                    self._queue.append(element)
            else:
                raise StopAsyncIteration
        return self._queue.popleft()


class Query:
    """Provides interface for user generated queries"""
    def __init__(self, session, element_class):
        self._session = session
        self._engine = session.engine
        self._element_class = element_class
        if element_class.__type__ == 'vertex':
            self._traversal = self.session.traversal.g.V().hasLabel(
                element_class.__mapping__.label)
            self._mapper = mapper.map_vertex_to_ogm
        elif element_class.__type__ == 'edge':
            self._traversal = self.session.traversal.g.E().hasLabel(
                element_class.__mapping__.label)
            self._mapper = mapper.map_edge_to_ogm
        else:
            raise Exception("unknown element type")

    @property
    def session(self):
        return self._session

    # Generative query methods...
    def filter(self, **kwargs):
        """Add a filter to the query"""
        raise NotImplementedError

    # Methods that issue a query
    async def all(self):
        """Get all results generated by query"""
        async_iter = await self.session.execute_traversal(self._traversal)
        return AsyncQueryResponseIter(async_iter, self)
